diff --git a/sunburnt/dates.py b/sunburnt/dates.py
index fd58976..e737349 100644
--- a/sunburnt/dates.py
+++ b/sunburnt/dates.py
@@ -2,15 +2,6 @@ from __future__ import absolute_import
 
 import datetime, math, re, warnings
 
-try:
-    import mx.DateTime
-except ImportError:
-    warnings.warn(
-        "mx.DateTime not found, retricted to Python datetime objects",
-        ImportWarning)
-    mx = None
-
-
 year = r'[+/-]?\d+'
 tzd = r'Z|((?P<tzd_sign>[-+])(?P<tzd_hour>\d\d):(?P<tzd_minute>\d\d))'
 extended_iso_template = r'(?P<year>'+year+r""")
@@ -66,27 +57,16 @@ class DateTimeRangeError(ValueError):
     pass
     
 
-if mx:
-    def datetime_factory(**kwargs):
-        try:
-            return mx.DateTime.DateTimeFrom(**kwargs)
-        except mx.DateTime.RangeError:
-            raise DateTimeRangeError(e.args[0])
-else:
-    def datetime_factory(**kwargs):
-        second = kwargs.get('second')
-        if second is not None:
-            f, i = math.modf(second)
-            kwargs['second'] = int(i)
-            kwargs['microsecond'] = int(f * 1000000)
-        try:
-            return datetime.datetime(**kwargs)
-        except ValueError, e:
-            raise DateTimeRangeError(e.args[0])
+def datetime_factory(**kwargs):
+    second = kwargs.get('second')
+    if second is not None:
+        f, i = math.modf(second)
+        kwargs['second'] = int(i)
+        kwargs['microsecond'] = int(f * 1000000)
+    try:
+        return datetime.datetime(**kwargs)
+    except ValueError, e:
+        raise DateTimeRangeError(e.args[0])
 
-if mx:
-    def datetime_delta_factory(hours, minutes):
-        return mx.DateTime.DateTimeDelta(0, hours, minutes)
-else:
-    def datetime_delta_factory(hours, minutes):
-        return datetime.timedelta(hours=hours, minutes=minutes)
+def datetime_delta_factory(hours, minutes):
+    return datetime.timedelta(hours=hours, minutes=minutes)
