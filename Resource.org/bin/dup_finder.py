# -*- coding: utf-8 -*-
#!/usr/bin/env python

# This software and any associated files are copyright 2010 Brian Carver and
# Michael Lissner.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'alert.settings'

import sys
sys.path.append("/var/www/court-listener")

from django import db
from django.conf import settings
from django.core.exceptions import MultipleObjectsReturned
from django.template.defaultfilters import slugify
from django.utils.encoding import smart_str, smart_unicode
from alert.alertSystem.models import Court, Citation, Document
from alert.lib.parse_dates import parse_dates
from alert.lib.string_utils import trunc
from alert.lib.encode_decode import num_to_ascii
from alert.lib.scrape_tools import hasDuplicate
from cleaning_scripts.lib.string_diff import find_good_matches, gen_diff_ratio

from lxml.html import fromstring, tostring
from urlparse import urljoin
import datetime
from datetime import date
from random import randint
import re
import string
import subprocess
import time
import urllib2

DEBUG = True

def build_date_range(dateFiled, range=5):
    '''Build a date range to be handed off to a sphinx query

    This builds an array that can be handed off to Sphinx in order to complete
    a date range filter. The range is set to a default of 5 days, which makes
    an 11-value array, but other values can be set as well.
    '''
    dateRange = []
    dateFiledInt = dateFiled.toordinal() + 365
    i = range
    # first we add range days before the dateFiled
    while i > 0:
        dateRange.append(dateFiledInt - i)
        i -= 1

    # next, we add the date itself
    dateRange.append(dateFiledInt)

    # finally, we add five days after
    i = 1
    while i <= range:
        dateRange.append(dateFiledInt + i)
        i += 1

    if DEBUG:
        print "dateRange: %s to %s" % (date.fromordinal(dateRange[0] - 365),\
            date.fromordinal(dateRange[range*2] - 365))
    return dateRange


def load_stopwords():
    '''Loads Sphinx's stopwords file.

    Pulls in the top 10000 words as generated by Sphinx, and returns them as
    an array to the  calling function.
    '''
    #  /usr/local/sphinx/bin/indexer -c sphinx-scraped-only.conf scraped-document --buildstops word_freq.txt 10000 --buildfreqs
    stopwords_file = open('/var/www/court-listener/Resource.org/bin/word_freq.5000.txt', 'r')
    stopwords = []
    for word in stopwords_file:
        try:
            stopwords.append(word.strip().encode('utf-8'))
        except UnicodeDecodeError:
            pass

    stopwords_file.close()
    return stopwords


def make_good_query(content, caseName, court, count=5, DEBUG=False):
    '''Grab words from the content and returns them to the caller.

    This function attempts to choose words from the content that the calling
    function would return the fewest cases if searched for. There are two
    eliminations: stopwords and headers/footers. To avoid these, we pick words
    from the middle sections of the document, and eliminate stopwords.
    '''
    stopwords = load_stopwords()
    words = content.split()
    length = len(words)
    i = 1
    query_words = []
    while i <= count and i < length:
        new_word = words[i].encode('utf-8').lower()

        # Clean the input a tad
        cleaner = re.compile(r'\'s')
        new_word = cleaner.sub('', new_word)
        new_word = new_word.strip('*').strip(',').strip('(').strip(')').strip(':').strip('"')

        # Boolean conditions
        stop = new_word in stopwords
        dup = new_word in query_words
        bad_stuff = re.search('[0-9./()!:]', new_word)
        too_short = True if len(new_word) <= 1 else False
        if stop or dup or bad_stuff or too_short:
            i += 1
            continue
        else:
            query_words.append(unicode(new_word, 'utf-8'))

    if len(query_words) > 0:
        # Set up an exact word query using the found words
	print query_words
        query = '=' + ' << ='.join(query_words) + ' @court %s' % court

    else:
        # Either it's a short case, or no good words within it...or both.
        # Try the casename instead.
        for word in caseName.split():
            # Clean up
            cleaner = re.compile(r'\'s')
            word = cleaner.sub('', word)
            word = word.strip('*').strip(',').strip('(').strip(')').strip(':').strip('"')

            # Boolean conditions
            dup = word in query_words
            bad_stuff = re.search('[0-9./()!:]', word)
            too_short = True if len(word) <= 1 else False
            if dup or bad_stuff or too_short:
                continue
            else:
                query_words.append(unicode(word, 'utf-8'))

        query = '@casename =' + ' << ='.join(query_words) + ' @court %s' % court

    if DEBUG:
        print "Query: %s" % query

    return query


def check_dup(court, dateFiled, caseName, content, docketNumber, DEBUG=False):
    '''Checks for a duplicate that already exists in the DB

    This is the only major difference (so far) from the F2 import process. This
    function will take various pieces of meta data from the F3 scrape, and will
    compare them to what's already known in the database.

    Process:
        1 find all cases from $court within a 5 day range of $date and with
          5 non-duplicated, non-punctuated, non-stemmed, non-stopwords in the
          correct order. If 5 isn't enough to have a small result set, add
          another one until there are no more words in the doc or enough
          words have been used.
        2 of the remaining values, see if any have matching case names. If so,
          consider it a match.

    Returns the duplicates as a queryset or None, depending on whether there's
    a dup.
    '''

    ################################################
    ### Phase 1: Refine by court, date and words ###
    ################################################
    num_words = 5

    # Add one word until either you run out of words or you get less than
    # 50 results.
    result_count = 51
    word_count = len(content.split())
    while result_count > 50 and num_words <= word_count:
        query = make_good_query(content, caseName, court, num_words, DEBUG)
        queryset = Document.search.query(query)
        docs_by_word_query = queryset.set_options(mode="SPH_MATCH_EXTENDED2")\
            .filter(dateFiled=build_date_range(dateFiled))
        result_count = docs_by_word_query.count()
        if DEBUG:
            for result in docs_by_word_query:
                print "After searching, found: %s" % result.pk
        
        if DEBUG:
            print "Search results count: %s" % result_count

        if not query.startswith('@casename'):
            num_words += 1
        else:
            # We've exhausted the possibilities for this case. Need to move on
            # regardless of count.
            break


    ########################################
    ### Phase 2: Find the best case name ###
    ########################################
    results, confidences = find_good_matches(docs_by_word_query, caseName)
    if DEBUG:
        print "After casename comparison, found %s candidate(s)" % len(results)
        print "Results: %s" % results
        print "Confidences: %s" % confidences
        if results[0] != None:
            for result, confidence in zip(results, confidences):
                print "Result document %s has confidence %s" % \
                    (result.pk, confidence)

    ####################################
    ### Phase 3: Check docket number ###
    ####################################
    if results[0] != None:
        phase_three_results = []
        for result in results:
            if result.citation.docketNumber in docketNumber or docketNumber in result.citation.docketNumber:
                # Definitely a duplicate.
                phase_three_results.append(result)
    else:
        return results

    ####################################################
    ### Phase 4: Check content length and similarity ###
    ####################################################
    if len(phase_three_results) > 0:
        phase_four_results = []
        spaces = re.compile(r' ')
        for result in phase_three_results:
            result_content_stripped = spaces.sub('', result.documentPlainText)
            content_stripped = spaces.sub('', content)

            # Check if lengths are within tolerance
            length = len(content_stripped)
            tolerance = length * 0.5
            lower_bound = length - tolerance
            upper_bound = length + tolerance
            if  lower_bound < len(result_content_stripped) < upper_bound:
                # The length of the result is within tolerance. Check that the
                # text is similar
                diff = gen_diff_ratio(result_content_stripped, content_stripped)
                if diff > 0.75:
                    # The documents are very similar. Must be a dup.
                    phase_four_results.append(result)

    else:
        return phase_three_results

    '''
    Any duplicate here has the following characteristics:
     - it is in the same court within five days
     - a precise search finds it.
     - the case name is similar
     - it may have the same docket number
     - it's length is within 5% of the original, and the content is similar
    '''
    return phase_four_results


def write_dups(source, dups, DEBUG=False):
    '''Writes duplicates to a file so they are logged.

    This function recieves a queryset and then writes out the values to a log.
    '''
    log = open('dup_log.txt', 'a')
    if dups[0] != None:
        log.write(str(source.pk))
        print "Logging match: " + str(source.pk),
        for dup in dups:
            # write out each doc
            log.write('|' + str(dup.pk) + " - " + num_to_ascii(dup.pk))
            if DEBUG:
                print '|' + str(dup.pk) + ' - ' + num_to_ascii(dup.pk),
    else:
        log.write("No dups found for %s" % source.pk)
        if DEBUG:
            print "No dups found for %s" % source.pk
    print ''
    log.write('\n')
    log.close()


def import_and_report_records():
    '''Traverses the first 1000 records and find their dups.

    This script is used to find dups within the database by comparing it to
    the sphinx index. This simulates the duplicate detection we will need to
    do when importing from other sources, and allows us to test it.
    '''

    #docs = Document.objects.all()[:1000]
    docs = Document.objects.filter(pk = 985184)

    # do this 1000 times
    for doc in docs:
        court = doc.court_id
        date = doc.dateFiled
        casename = doc.citation.caseNameFull
        content = doc.documentPlainText
        if content == "":
            # HTML content!
            content = doc.documentHTML
            br = re.compile(r'<br/?>')
            content = br.sub(' ', content)
            p = re.compile(r'<.*?>')
            content = p.sub('', content)

        dups = check_dup(court, date, casename, content)

        if dups[0] != None:
            # duplicate(s) were found, write them out to a log
            write_dups(doc, dups)

        if DEBUG:
            print ''
        # Clear query cache, as it presents a memory leak when in dev mode
        db.reset_queries()

    exit(0)


def main():
    print import_and_report_records()
    print "Completed 1000 records successfully. Exiting."
    exit(0)


if __name__ == '__main__':
    main()

